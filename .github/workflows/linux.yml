name: Linux
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/linux.yml'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/linux.yml'
jobs:
  build-linux:
    name: Ubuntu
    runs-on: ubuntu-20.04
    env:
      QT_VER: "6.5.0"
    steps:
      - name: Get repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install software-properties-common -y && \
          sudo add-apt-repository ppa:git-core/ppa -y && \
          sudo apt-get update && \
          sudo apt-get install git libexif-dev liblzma-dev libz-dev libssl-dev \
          libgtk2.0-dev libice-dev libsm-dev libicu-dev libdrm-dev dh-autoreconf \
          autoconf automake build-essential libxml2-dev libass-dev libfreetype6-dev \
          libgpac-dev libsdl1.2-dev libtheora-dev libtool libva-dev libvdpau-dev \
          libvorbis-dev libxcb1-dev libxcb-image0-dev libxcb-shm0-dev \
          libxcb-xfixes0-dev libxcb-keysyms1-dev libxcb-icccm4-dev libatspi2.0-dev \
          libxcb-render-util0-dev libxcb-util0-dev libxcb-xkb-dev libxrender-dev \
          libasound-dev libpulse-dev libxcb-sync0-dev libxcb-randr0-dev libegl1-mesa-dev \
          libx11-xcb-dev libffi-dev libncurses5-dev pkg-config texi2html bison yasm \
          zlib1g-dev xutils-dev chrpath gperf wget -y --force-yes \
          unixodbc-dev=2.3.7 unixodbc=2.3.7 odbcinst1debian2=2.3.7 odbcinst=2.3.7 && \
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
          sudo apt-get update && \
          sudo apt-get install gcc-11 g++-11 -y && \
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 60 && \
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 60 && \
          sudo update-alternatives --config gcc && \
          sudo add-apt-repository --remove ppa:ubuntu-toolchain-r/test -y

      - name: Clone
        uses: actions/checkout@v3
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: Generate cache key
        shell: bash
        run: |
          gcc --version

          gcc --version > CACHE_KEY.txt
          md5cache=$(md5sum CACHE_KEY.txt | cut -c -32)
          echo "CACHE_KEY=$md5cache" >> $GITHUB_ENV

          mkdir -p Libraries && cd Libraries
          echo "LibrariesPath=`pwd`" >> $GITHUB_ENV

      - name: Libwayland.
        run: |
          cd $LibrariesPath
          git clone -b 1.18.0 https://gitlab.freedesktop.org/wayland/wayland
          cd wayland
          ./autogen.sh \
          --enable-static \
          --disable-documentation \
          --disable-dtd-validation
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf wayland
          
      - name: Libxkbcommon
        run: |
          cd $LibrariesPath
          git clone -b xkbcommon-0.8.4 --depth=1 https://github.com/xkbcommon/libxkbcommon.git
          cd libxkbcommon
          ./autogen.sh \
          --disable-docs \
          --disable-wayland \
          --with-xkb-config-root=/usr/share/X11/xkb \
          --with-x-locale-root=/usr/share/X11/locale
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf libxkbcommon

      - name: Qt cache
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ${{ env.LibrariesPath }}/qt-build
          key: ${{ runner.OS }}-qt-${{ env.CACHE_KEY }}

      - name: Qt build
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          cd $LibrariesPath

          git clone -b v$QT_VER --depth=1 git://code.qt.io/qt/qt5.git qt-sources
          cd qt-sources
          perl init-repository --module-subset=qtbase
          git submodule update qtbase

          ./configure \
          -prefix "$LibrariesPath/qt-build" \
          -release \
          -opensource \
          -confirm-license \
          -qt-zlib \
          -qt-libpng \
          -qt-libjpeg \
          -qt-harfbuzz \
          -qt-pcre \
          -no-icu \
          -no-gtk \
          -no-zstd \
          -static \
          -dbus-runtime \
          -no-openssl \
          -nomake examples \
          -nomake tests \
          -optimize-size

          make -j$(nproc)
          sudo make INSTALL_ROOT="$LibrariesPath/qt-build" install

      - name: SDL cache
        id: cache-sdl
        uses: actions/cache@v3
        with:
          path: ${{ env.REPO_NAME }}/submodules/SDL
          key: ${{ runner.OS }}-sdl-${{ env.CACHE_KEY }}
      - name: SDL build
        if: steps.cache-sdl.outputs.cache-hit != 'true'
        run: |
          cd $REPO_NAME
          git submodule update --init submodules/SDL
          cd submodules/SDL
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel

      - name: FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: ${{ env.REPO_NAME }}/submodules/FFmpeg
          key: ${{ runner.OS }}-ffmpeg-${{ env.CACHE_KEY }}
      - name: FFmpeg build
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd $REPO_NAME
          git submodule update --init submodules/FFmpeg
          cd submodules/FFmpeg
          ./configure \
          --disable-debug \
          --disable-programs \
          --disable-doc \
          --disable-network \
          --disable-autodetect \
          --disable-everything \
          --disable-alsa \
          --disable-iconv \
          --enable-vdpau \
          --enable-vaapi \
          --enable-protocol=file \
          --enable-decoder=aac \
          --enable-decoder=aac_fixed \
          --enable-decoder=aac_latm \
          --enable-decoder=aasc \
          --enable-decoder=ac3 \
          --enable-decoder=alac \
          --enable-decoder=flac \
          --enable-decoder=gif \
          --enable-decoder=mp1 \
          --enable-decoder=mp1float \
          --enable-decoder=mp2 \
          --enable-decoder=mp2float \
          --enable-decoder=mp3 \
          --enable-decoder=mp3adu \
          --enable-decoder=mp3adufloat \
          --enable-decoder=mp3float \
          --enable-decoder=mp3on4 \
          --enable-decoder=mp3on4float \
          --enable-decoder=mpeg4 \
          --enable-decoder=mpeg4_vdpau \
          --enable-decoder=msmpeg4v2 \
          --enable-decoder=msmpeg4v3 \
          --enable-decoder=pcm_alaw \
          --enable-decoder=pcm_f32be \
          --enable-decoder=pcm_f32le \
          --enable-decoder=pcm_f64be \
          --enable-decoder=pcm_f64le \
          --enable-decoder=pcm_lxf \
          --enable-decoder=pcm_mulaw \
          --enable-decoder=pcm_s16be \
          --enable-decoder=pcm_s16be_planar \
          --enable-decoder=pcm_s16le \
          --enable-decoder=pcm_s16le_planar \
          --enable-decoder=pcm_s24be \
          --enable-decoder=pcm_s24daud \
          --enable-decoder=pcm_s24le \
          --enable-decoder=pcm_s24le_planar \
          --enable-decoder=pcm_s32be \
          --enable-decoder=pcm_s32le \
          --enable-decoder=pcm_s32le_planar \
          --enable-decoder=pcm_s64be \
          --enable-decoder=pcm_s64le \
          --enable-decoder=pcm_s8 \
          --enable-decoder=pcm_s8_planar \
          --enable-decoder=pcm_u16be \
          --enable-decoder=pcm_u16le \
          --enable-decoder=pcm_u24be \
          --enable-decoder=pcm_u24le \
          --enable-decoder=pcm_u32be \
          --enable-decoder=pcm_u32le \
          --enable-decoder=pcm_u8 \
          --enable-decoder=pcm_zork \
          --enable-decoder=vorbis \
          --enable-decoder=wavpack \
          --enable-decoder=wmalossless \
          --enable-decoder=wmapro \
          --enable-decoder=wmav1 \
          --enable-decoder=wmav2 \
          --enable-decoder=wmavoice \
          --enable-parser=aac \
          --enable-parser=aac_latm \
          --enable-parser=flac \
          --enable-parser=h264 \
          --enable-parser=hevc \
          --enable-parser=mpegaudio \
          --enable-parser=vorbis \
          --enable-demuxer=aac \
          --enable-demuxer=flac \
          --enable-demuxer=gif \
          --enable-demuxer=h264 \
          --enable-demuxer=hevc \
          --enable-demuxer=m4v \
          --enable-demuxer=mov \
          --enable-demuxer=mp3 \
          --enable-demuxer=ogg \
          --enable-demuxer=wav \
          --enable-muxer=ogg
          make -j$(nproc)

      - name: SoundBox build
        run: |
          cd $REPO_NAME

          cmake -DCMAKE_PREFIX_PATH=$LibrariesPath/qt-build -DCMAKE_CXX_FLAGS="-s"
          make -j$(nproc)

      - uses: actions/upload-artifact@v3
        name: Upload artifact
        with:
          name: soundbox-linux
          path: ${{ env.REPO_NAME }}/soundbox
