name: MacOS
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/macos.yml'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/macos.yml'
jobs:
  build-macos:
    runs-on: macos-latest
    env:
      QT_VER: "6.4.0"
      UNGUARDED: "-Werror=unguarded-availability-new"
    steps:
      - name: Get repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Clone
        uses: actions/checkout@v3
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: Install dependencies
        run: |
          sudo chown -R `whoami`:admin /usr/local/share

          brew install automake libtool ninja shtool yasm pkg-config

      - name: Set up environment variables
        shell: bash
        run: |
          mkdir Libraries && cd Libraries
          echo "LibrariesPath=`pwd`" >> $GITHUB_ENV

      - name: Generate cache key
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

          xcodebuild -version > CACHE_KEY.txt
          echo "CACHE_KEY=`md5 -q CACHE_KEY.txt`" >> $GITHUB_ENV

      - name: Qt cache
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ${{ env.LibrariesPath }}/qt-build
          key: ${{ runner.OS }}-qt-${{ env.CACHE_KEY }}

      - name: Qt build
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          cd $LibrariesPath

          git clone -b v$QT_VER --depth=1 git://code.qt.io/qt/qt5.git qt-sources
          cd qt-sources
          perl init-repository --module-subset=qtbase
          git submodule update qtbase

          ./configure \
          -prefix "$LibrariesPath/qt-build" \
          -release \
          -opensource \
          -confirm-license \
          -static \
          -opengl desktop \
          -no-openssl \
          -nomake examples \
          -nomake tests \
          -optimize-size \
          -platform macx-clang

          cmake --build . --parallel $NUMBER_OF_PROCESSORS
          cmake --install .

      - name: SDL cache
        id: cache-sdl
        uses: actions/cache@v3
        with:
          path: ${{ env.REPO_NAME }}/submodules/SDL
          key: ${{ runner.OS }}-sdl-${{ env.CACHE_KEY }}
      - name: SDL build
        if: steps.cache-sdl.outputs.cache-hit != 'true'
        run: |
          cd $REPO_NAME
          git submodule update --init submodules/SDL
          cd submodules/SDL
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --parallel

      - name: FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: ${{ env.REPO_NAME }}/submodules/FFmpeg
          key: ${{ runner.OS }}-ffmpeg-${{ env.CACHE_KEY }}
      - name: FFmpeg build
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd $REPO_NAME
          git submodule update --init submodules/FFmpeg
          cd submodules/FFmpeg
          CFLAGS=`freetype-config --cflags`
          LDFLAGS=`freetype-config --libs`
          PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/usr/X11/lib/pkgconfig
          ./configure \
          --extra-cflags="$UNGUARDED" \
          --extra-cxxflags="$UNGUARDED" \
          --disable-programs \
          --disable-doc \
          --disable-network \
          --disable-everything \
          --disable-decoder=jpeg2000 \
          --enable-protocol=file \
          --enable-hwaccel=h264_videotoolbox \
          --enable-hwaccel=hevc_videotoolbox \
          --enable-hwaccel=mpeg1_videotoolbox \
          --enable-hwaccel=mpeg2_videotoolbox \
          --enable-hwaccel=mpeg4_videotoolbox \
          --enable-decoder=aac \
          --enable-decoder=aac_at \
          --enable-decoder=aac_fixed \
          --enable-decoder=aac_latm \
          --enable-decoder=aasc \
          --enable-decoder=ac3 \
          --enable-decoder=alac \
          --enable-decoder=alac_at \
          --enable-decoder=flac \
          --enable-decoder=gif \
          --enable-decoder=h264 \
          --enable-decoder=hevc \
          --enable-decoder=mp1 \
          --enable-decoder=mp1float \
          --enable-decoder=mp2 \
          --enable-decoder=mp2float \
          --enable-decoder=mp3 \
          --enable-decoder=mp3adu \
          --enable-decoder=mp3adufloat \
          --enable-decoder=mp3float \
          --enable-decoder=mp3on4 \
          --enable-decoder=mp3on4float \
          --enable-decoder=mpeg4 \
          --enable-decoder=msmpeg4v2 \
          --enable-decoder=msmpeg4v3 \
          --enable-decoder=pcm_alaw \
          --enable-decoder=pcm_alaw_at \
          --enable-decoder=pcm_f32be \
          --enable-decoder=pcm_f32le \
          --enable-decoder=pcm_f64be \
          --enable-decoder=pcm_f64le \
          --enable-decoder=pcm_lxf \
          --enable-decoder=pcm_mulaw \
          --enable-decoder=pcm_mulaw_at \
          --enable-decoder=pcm_s16be \
          --enable-decoder=pcm_s16be_planar \
          --enable-decoder=pcm_s16le \
          --enable-decoder=pcm_s16le_planar \
          --enable-decoder=pcm_s24be \
          --enable-decoder=pcm_s24daud \
          --enable-decoder=pcm_s24le \
          --enable-decoder=pcm_s24le_planar \
          --enable-decoder=pcm_s32be \
          --enable-decoder=pcm_s32le \
          --enable-decoder=pcm_s32le_planar \
          --enable-decoder=pcm_s64be \
          --enable-decoder=pcm_s64le \
          --enable-decoder=pcm_s8 \
          --enable-decoder=pcm_s8_planar \
          --enable-decoder=pcm_u16be \
          --enable-decoder=pcm_u16le \
          --enable-decoder=pcm_u24be \
          --enable-decoder=pcm_u24le \
          --enable-decoder=pcm_u32be \
          --enable-decoder=pcm_u32le \
          --enable-decoder=pcm_u8 \
          --enable-decoder=pcm_zork \
          --enable-decoder=vorbis \
          --enable-decoder=wavpack \
          --enable-decoder=wmalossless \
          --enable-decoder=wmapro \
          --enable-decoder=wmav1 \
          --enable-decoder=wmav2 \
          --enable-decoder=wmavoice \
          --enable-parser=aac \
          --enable-parser=aac_latm \
          --enable-parser=flac \
          --enable-parser=h264 \
          --enable-parser=hevc \
          --enable-parser=mpeg4video \
          --enable-parser=mpegaudio \
          --enable-parser=vorbis \
          --enable-demuxer=aac \
          --enable-demuxer=flac \
          --enable-demuxer=gif \
          --enable-demuxer=h264 \
          --enable-demuxer=hevc \
          --enable-demuxer=m4v \
          --enable-demuxer=mov \
          --enable-demuxer=mp3 \
          --enable-demuxer=ogg \
          --enable-demuxer=wav \
          --enable-muxer=ogg
          make -j$(nproc)

      - name: SoundBox build
        run: |
          cd $REPO_NAME

          cmake -GXcode -DCMAKE_PREFIX_PATH=$LibrariesPath/qt-build
          xcoderun='xcodebuild build -project soundbox.xcodeproj -scheme soundbox -destination "platform=macOS,arch=x86_64" -configuration Release'
          bash -c "$xcoderun"

      - uses: actions/upload-artifact@v3
        name: Upload artifact
        with:
          name: soundbox-macos
          path: ${{ env.REPO_NAME }}/Release
